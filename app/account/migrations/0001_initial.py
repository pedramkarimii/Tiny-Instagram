# Generated by Django 5.0.3 on 2024-03-28 17:51

import ckeditor.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('gender', models.CharField(max_length=20)),
                ('age', models.PositiveSmallIntegerField(default=0)),
                ('bio', ckeditor.fields.RichTextField()),
                ('profile_picture', models.ImageField(upload_to='profile_picture/%Y/%m/%d/')),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ('-update_time', '-create_time'),
            },
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_follow', models.BooleanField(default=False)),
                ('create_time_follow', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Relation',
                'verbose_name_plural': 'Relations',
                'ordering': ('-create_time_follow',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_.+-]+$', 'Username must contain only letters, digits, or underscores and be at least 4 characters long.')])),
                ('email', models.EmailField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9._%+-]+@(?:gmail|yahoo)\\.com$', 'Please enter a valid gmail or yahoo email address.')])),
                ('phone_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator('09(1[0-9]|3[0-9]|2[0-9]|0[1-9]|9[0-9])[0-9]{7}$', 'Please enter a valid phone number.')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ('-update_time', '-create_time', 'is_deleted'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OptCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.PositiveSmallIntegerField()),
                ('phone_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator('09(1[0-9]|3[0-9]|2[0-9]|0[1-9]|9[0-9])[0-9]{7}$', 'Please enter a valid phone number.')])),
                ('email', models.EmailField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9._%+-]+@(?:gmail|yahoo)\\.com$', 'Please enter a valid gmail or yahoo email address.')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'OTP',
                'verbose_name_plural': 'OTPs',
                'ordering': ('created',),
                'indexes': [models.Index(fields=['code', 'phone_number'], name='index_code_phone_number')],
            },
        ),
        migrations.AddConstraint(
            model_name='optcode',
            constraint=models.UniqueConstraint(fields=('code', 'phone_number'), name='unique_code_phone_number'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_query_name='user_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='relation',
            name='followers',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='relation',
            name='following',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_followers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'email'], name='index_username_email'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'email'), name='unique_username_email'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['user', 'full_name'], name='index_user_full_name'),
        ),
        migrations.AddConstraint(
            model_name='profile',
            constraint=models.UniqueConstraint(fields=('user', 'full_name'), name='unique_user_full_name'),
        ),
        migrations.AddIndex(
            model_name='relation',
            index=models.Index(fields=['followers', 'following'], name='index_followers_following'),
        ),
        migrations.AddConstraint(
            model_name='relation',
            constraint=models.UniqueConstraint(fields=('followers', 'following'), name='unique_followers_following'),
        ),
    ]
